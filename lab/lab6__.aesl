<!DOCTYPE aesl-source>
<network>


<!--list of global events-->
<event size="1" name="log_rc5_cmd"/>
<event size="1" name="log_rc5_add"/>
<event size="1" name="log_rc5_val"/>
<event size="1" name="new_state_log"/>
<event size="1" name="state_log"/>
<event size="3" name="pose_log"/>
<event size="3" name="t_pose_log"/>


<!--list of constants-->
<constant value="200" name="INIT_SPEED"/>
<constant value="100" name="MIN_SPEED"/>
<constant value="400" name="MAX_SPEED"/>
<constant value="100" name="DELTA_SPEED"/>
<constant value="100" name="TURN_SPEED"/>
<constant value="783" name="TURN_100"/>
<constant value="35" name="DIST_100"/>
<constant value="5" name="RUN_CNT"/>
<constant value="0" name="ST_TURN"/>
<constant value="1" name="ST_DRIVE"/>
<constant value="2" name="ST_SET_TARGET"/>
<constant value="3" name="ST_RESET"/>
<constant value="4" name="ST_END"/>
<constant value="5" name="ST_RCV"/>
<constant value="6" name="ST_WAIT_CMD"/>
<constant value="7" name="ST_WAIT_END"/>
<constant value="8" name="ST_RCV_ID"/>
<constant value="9" name="ST_RCV_X"/>
<constant value="10" name="ST_RCV_Y"/>
<constant value="11" name="ST_RCV_TX"/>
<constant value="12" name="ST_RCV_TY"/>
<constant value="16" name="CMD_START"/>
<constant value="17" name="CMD_STOP"/>
<constant value="32" name="CMD_SEP"/>
<constant value="33" name="CMD_NEG"/>
<constant value="183" name="MY_ID"/>


<!--show keywords state-->
<keywords flag="true"/>


<!--node thymio-II-->
<node nodeId="1" name="thymio-II">
var real_pose[3] = [0, 0, 0] # real pose entered by remote
var targ_pose[3] = [0, 0, 0] # target pose entered by remote
var int_pose[3] = [0, 0, 0] # calculated pose of robot
var temp_pose[3] = [0, 0, 0] # temporary pose used for calcualtion
var R = 5 # allowd deviation [cm]
var drive_state = ST_RESET
var next_drive_state = ST_RESET
var cmd_state = ST_WAIT_CMD
var next_cmd_state = ST_WAIT_CMD
var R_init = R*100
var R_step = DIST_100*INIT_SPEED/DELTA_SPEED
var speed_out[2] = [0, 0]
var speed_in = INIT_SPEED
var delta_dist = 0 # 1/10 of mm
var turn_dist = 0
var drive_dist[2] = [0, 0]
var g_drive_dist[2] = [0, 0]
var reached[2] = [0, 0]
var n = 0
var dec_cnt = 0
var rc5_val = 0
var rc5_neg = 0

timer.period[0] = 100
R = R*100

# speed = 200 -> travels 3.5mm per 100ms
# turn_speed = (+100, -100) -> turns 783 per 100ms

onevent timer0
	if drive_state == ST_RESET then
		motor.left.target = 0
		motor.right.target = 0
		temp_pose = [0, 0, 0]
		targ_pose = [0, 0, 0]
		real_pose = [0, 0, 0]
		int_pose = [0, 0, 0]
		speed_out = [0, 0]
		delta_dist = 0
		turn_dist = 0
		drive_dist = [0, 0]
		g_drive_dist = [0, 0]
		n = 0
		call leds.top(0, 0, 0)
		next_drive_state = ST_RESET
	end
	if drive_state == ST_RCV then
		motor.left.target = 0
		motor.right.target = 0
		next_drive_state = ST_RCV
	else
		# save actual mean speed and reset mean calculation
		temp_pose[0] = speed_out[0]
		temp_pose[1] = speed_out[1]
		speed_out = [0, 0]
		n = 0
		# set new angle
		if motor.left.target > 0 or motor.right.target > 0 then
			call math.muldiv(temp_pose[2], temp_pose[1] - temp_pose[0], TURN_100, 2*TURN_SPEED)
			int_pose[2] += temp_pose[2]
		end
		# set new x and y cooridinates
		delta_dist = (temp_pose[0] + temp_pose[1])*DIST_100/(2*DELTA_SPEED)
		call math.cos(temp_pose[0], int_pose[2])
		call math.sin(temp_pose[1], int_pose[2])
		call math.muldiv(temp_pose[0], delta_dist, temp_pose[0], 32767)
		call math.muldiv(temp_pose[1], delta_dist, temp_pose[1], 32767)
		int_pose[0] += temp_pose[0]
		int_pose[1] += temp_pose[1]
	end

	# check if target pose has been reached
	if drive_state == ST_SET_TARGET then
		reached = [0, 0]
		next_drive_state = ST_TURN
	end
	if drive_state == ST_TURN then
		turn_dist = (targ_pose[2]/10 - int_pose[2]/10) * 10
		if turn_dist &lt;= TURN_100 and turn_dist >= -TURN_100 then
			next_drive_state = ST_DRIVE
			motor.left.target = 0
			motor.right.target = 0
		else
			next_drive_state = ST_TURN
			if turn_dist &lt; 0 then
				motor.left.target = TURN_SPEED
				motor.right.target = -TURN_SPEED
			else
				motor.left.target = -TURN_SPEED
				motor.right.target = TURN_SPEED
			end
		end
	end
	if drive_state == ST_DRIVE then
		drive_dist[0] = targ_pose[0] - int_pose[0]
		drive_dist[1] = targ_pose[1] - int_pose[1]
		# check if target is reached for both axes
		if drive_dist[0] &lt;= R_step and drive_dist[0] >= -R_step then
			reached[0] = 1 # reached x target
		end
		if drive_dist[1] &lt;= R_step and drive_dist[1] >= -R_step then
			reached[1] = 1 # reached y target
		end
		if reached[0] == 1 and reached[1] == 1 then
			# reached destination
			next_drive_state = ST_END
			motor.left.target = 0
			motor.right.target = 0
			g_drive_dist += drive_dist
			# check if robot is still within the permitted boundaries
			if g_drive_dist[0] > R or g_drive_dist[0] &lt; -R or
				g_drive_dist[1] > R or g_drive_dist[1] &lt; -R then
				call leds.top(16, 16, 0)
			else	
				call leds.top(0, 0, 0)
			end
		else
			next_drive_state = ST_DRIVE
			motor.left.target = speed_in
			motor.right.target = speed_in
		end
	end
	if drive_state == ST_END then
		# check if robot is still within the permitted boundaries
		if g_drive_dist[0] > R or g_drive_dist[0] &lt; -R or
			g_drive_dist[1] > R or g_drive_dist[1] &lt; -R then
			call leds.top(32, 0, 0)
		else	
			call leds.top(0, 32, 0)
		end
		next_drive_state = ST_END
	end
	drive_state = next_drive_state
	
	# log
#	emit log_rc5_cmd rc5.command
#	emit log_rc5_add rc5.address
#	emit log_rc5_val rc5_val
#	emit state_log state
#	emit new_state_log new_state
	emit pose_log int_pose
	emit t_pose_log targ_pose

onevent motor
	# mean speed calculation
	speed_out[0] += (motor.left.speed - speed_out[0])/(n+1)
	speed_out[1] += (motor.right.speed - speed_out[1])/(n+1)
	n++

onevent rc5
	when rc5.command == CMD_START do
		#if cmd_state == ST_WAIT_CMD then
		rc5_val = 0
		call leds.top(16, 0, 16)
		next_cmd_state = ST_RCV_ID
		if drive_state == ST_RESET or drive_state == ST_END then
			next_drive_state = ST_RCV
			drive_state = ST_RCV
		end
		#end
	end
	when rc5.command == CMD_STOP do
		if cmd_state == ST_WAIT_END then
			next_drive_state = ST_SET_TARGET
			drive_state = ST_SET_TARGET
			next_cmd_state = ST_WAIT_CMD
			call leds.top(0, 0, 0)
		end
	end
	when rc5.command == CMD_SEP do
		if rc5_neg == 1 then
			rc5_val = -rc5_val
			rc5_neg = 0
		end
		if cmd_state == ST_RCV_ID then
			rc5_neg = 0
			if rc5_val == MY_ID then
				next_cmd_state = ST_RCV_X
				next_drive_state = ST_RCV
				drive_state = ST_RCV
				call leds.top(32, 32, 32)
			else
				next_cmd_state = ST_WAIT_CMD
				call leds.top(0, 0, 0)
			end
		end
		if cmd_state == ST_RCV_X then
			next_cmd_state = ST_RCV_Y
			call leds.top(0, 32, 32)
			temp_pose[0] = rc5_val*100
		end
		if cmd_state == ST_RCV_Y then
			next_cmd_state = ST_RCV_TX
			call leds.top(0, 32, 0)
			temp_pose[1] = rc5_val*100
			call math.atan2(temp_pose[2], temp_pose[1]-real_pose[1], temp_pose[0]-real_pose[0])
			real_pose = temp_pose
			int_pose = real_pose
		end
		if cmd_state == ST_RCV_TX then
			next_cmd_state = ST_RCV_TY
			call leds.top(0, 0, 32)
			targ_pose[0] = rc5_val*100
		end
		if cmd_state == ST_RCV_TY then
			next_cmd_state = ST_WAIT_END
			call leds.top(32, 32, 32)
			targ_pose[1] = rc5_val*100
			call math.atan2(targ_pose[2], targ_pose[1] - real_pose[1], targ_pose[0] - real_pose[0])
		end
		dec_cnt = 0
	end
	cmd_state = next_cmd_state
	when rc5.command == CMD_NEG do
		rc5_neg = 1
	end
	if rc5.command >= 0 and rc5.command &lt;= 9 then
		if dec_cnt == 0 then
			rc5_val = rc5.command
		else
			rc5_val *= 10
			rc5_val += rc5.command
		end
		dec_cnt++
	end
	
# DEBUG
onevent button.center
	when button.center == 1 do
		if drive_state == ST_RESET then
			drive_state = ST_SET_TARGET
		else
			speed_in = INIT_SPEED
			R = R_init
			drive_state = ST_RESET
		end
	end

onevent button.forward
	when button.forward == 1 do
		if drive_state == ST_RESET then
			speed_in += DELTA_SPEED
			if speed_in > MAX_SPEED then
				speed_in = MAX_SPEED
			end
			R_step = DIST_100*speed_in/DELTA_SPEED
		end
	end

onevent button.backward
	when button.backward == 1 do
		if drive_state == ST_RESET then
			speed_in -= DELTA_SPEED
			if speed_in &lt; MIN_SPEED then
				speed_in = MIN_SPEED
			end
			R_step = DIST_100*speed_in/DELTA_SPEED
		end
	end

onevent button.left
	when button.left == 1 do
		if drive_state == ST_RESET then
			R -= 100
			if R &lt;= 0 then
				R = 100
			end
		end
	end

onevent button.right
	when button.right == 1 do
		if drive_state == ST_RESET then
			R += 100
		end
	end</node>


</network>
